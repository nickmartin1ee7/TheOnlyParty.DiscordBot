// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.ML;
using Microsoft.OpenApi.Models;
using System.Threading.Tasks;
using static MLModel1;
using Microsoft.AspNetCore.Mvc;
using System.Linq;
using TheOnlyParty.ClassLibrary;
using Microsoft.Extensions.Logging;

// Configure app
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddPredictionEnginePool<MLModel1.ModelInput, MLModel1.ModelOutput>()
    .FromFile("MLModel1.zip");

builder.Services.AddEndpointsApiExplorer();

builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Description = "Docs for my API", Version = "v1" });
});

var app = builder.Build();

app.UseSwagger();

app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "Text Sentiment v1");
});

// Define prediction route & handler
app.MapPost("/predict", async (PredictionEnginePool<MLModel1.ModelInput, MLModel1.ModelOutput> predictionEnginePool, [FromBody] string input) =>
    {
        var result = await Task.FromResult(predictionEnginePool.Predict(new ModelInput { Text = input }));
        
        return new MlResult
        {
            Positive = result.PredictedLabel > 2f,
            Confidence = result.Score.Max()
        };
    });

// Run app
app.Run();